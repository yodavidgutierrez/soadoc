package co.com.foundation.sgd.infrastructure;

import java.security.Key;
import java.time.LocalDateTime;
import java.time.ZoneId;
import java.util.Date;

import javax.crypto.spec.SecretKeySpec;

import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.SignatureAlgorithm;

public class KeyManager {
	
	private static KeyManager SINGLETON = new KeyManager();
	private Key key;
	private final Long expirationTime = 120L;
	
	private KeyManager() {
		super();
		key = generateKey();
	}

	public static KeyManager getInstance(){
		return SINGLETON;
	}
	
	public String issueToken(String login, String issuer) {
		
        return Jwts.builder()
                .setSubject(login)
                .setIssuer(issuer)
                .setIssuedAt(new Date())
                .setExpiration(generateExpirationForKey())
                .signWith(SignatureAlgorithm.HS512, key)
                .compact();
    }
	
	public Key getKey(){
		return key;
	}
	
	private Key generateKey() {
		//TODO: key should be read from fyle system and not generated by system
        String keyString = "simplekey";
        return new SecretKeySpec(keyString.getBytes(), 0, keyString.getBytes().length, "DES");
    }
	
	private Date generateExpirationForKey() {
		LocalDateTime localDateTime = LocalDateTime.now().plusMinutes(expirationTime);
        return Date.from(localDateTime.atZone(ZoneId.systemDefault()).toInstant());
    }

    private void extendingExpirationTime(){


	}
	
}
